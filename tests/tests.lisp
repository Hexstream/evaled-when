(cl:defpackage #:evaled-when_tests
  (:use #:cl #:parachute)
  (:shadow #:test)
  (:import-from #:evaled-when #:evaled-when)
  (:shadowing-import-from #:enhanced-boolean #:boolean))

(cl:in-package #:evaled-when_tests)

(defun %expand (form)
  (first (evaled-when:extract-compile-toplevel-forms (list form))))

(defmacro expands-to (evaled-when-form eval-when-form)
  `(is equal ',eval-when-form
       (%expand ',evaled-when-form)))

(defun test-situations (situations compile-toplevel load-toplevel execute)
  (is equal (mapcar #'boolean (list compile-toplevel load-toplevel execute))
      (multiple-value-list (evaled-when:parse-situations situations))))

(define-test "main"
  (test-situations '() nil nil nil)
  (test-situations '(:compile-toplevel) t nil nil)
  (test-situations '(:load-toplevel) nil t nil)
  (test-situations '(:execute) nil nil t)
  (test-situations '(:execute :load-toplevel) nil t t)
  (test-situations '(compile) t nil nil)
  (test-situations '(load) nil t nil)
  (test-situations '(eval) nil nil t)
  (test-situations '(:compile-toplevel :load-toplevel :execute) t t t)
  (test-situations '(:execute :load-toplevel :compile-toplevel) t t t)
  (test-situations '(compile load eval) t t t)
  (test-situations '(:compile-toplevel :compile-toplevel) t nil nil)
  (test-situations '(:compile-toplevel eval :load-toplevel load :execute compile) t t t)
  (test-situations '(eval :compile-toplevel load :load-toplevel compile :execute) t t t)
  (fail (evaled-when:parse-situations '(:invalid)))
  (expands-to (foo) nil)
  (expands-to (eval-when (:compile-toplevel))
              nil)
  (expands-to (eval-when (:compile-toplevel)
                (foo))
              (foo))
  (expands-to (let ()
                (eval-when (:compile-toplevel)
                  (foo)))
              nil)
  (expands-to (macrolet ()
                (eval-when (:compile-toplevel)
                  (foo)))
              (macrolet ()
                (foo)))
  (expands-to (macrolet ((foo () 'bar))
                (eval-when (:compile-toplevel :load-toplevel)
                  (foo)))
              (macrolet ((foo () 'bar))
                bar))
  (expands-to (symbol-macrolet ((foo bar))
                (eval-when (:compile-toplevel :load-toplevel)
                  foo))
              (symbol-macrolet ((foo bar))
                bar))
  (expands-to (macrolet ((foo () 'bar))
                (eval-when (:compile-toplevel)
                  (foo)))
              (macrolet ((foo () 'bar))
                (foo)))
  (expands-to (symbol-macrolet ((foo bar))
                (eval-when (:compile-toplevel)
                  foo))
              (symbol-macrolet ((foo bar))
                foo))
  (expands-to (symbol-macrolet ((foo (eval-when (:compile-toplevel)
                                       bar)))
                foo)
              (symbol-macrolet ((foo (eval-when (:compile-toplevel)
                                       bar)))
                bar))
  (true (%expand `(defclass foo () ()))))
